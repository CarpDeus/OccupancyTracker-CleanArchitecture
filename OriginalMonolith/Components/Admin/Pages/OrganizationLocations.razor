@page "/admin/{organizationSqid}/"
@using OccupancyTracker.Components.Admin.Components
@inject IOccAuthorizationService occAuthorizationService


@implements IDisposable
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject OccupancyTracker.IService.IOrganizationService organizationService
@inject OccupancyTracker.IService.ILocationService locationService
@inject MudBlazor.ISnackbar Snackbar
@inject IDialogService DialogService

<MudTable Items="@(GetLocations().Result)" Dense="@dense" Hover="@hover" Filter="new Func<Location, bool>(FilterFunc)"   @bind-entity="location">
    <ToolBarContent>
        <MudText Typo="Typo.h4">@orgName Locations</MudText>
        <MudSpacer />
        <MudTextField  Margin="Margin.Dense" T="string" @bind-Value="searchString" Placeholder="search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Add" OnClick="@(()=>Edit("", userInformationSqid))" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Location Name</MudTh>
        <MudTh>Location Description</MudTh>
        <MudTh>Current Status</MudTh>
        <MudTh>Max Occupancy</MudTh>
        <MudTh>Threshold Warning</MudTh>
        <MudTh>Current Occupancy</MudTh>
        <MudTh># Entrances</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="LocationName">@context.LocationName</MudTd>
            <MudTd DataLabel="LocationDescription">@context.LocationDescription</MudTd>
            <MudTd DataLabel="CurrentStatusDescription">@context.CurrentStatusDescription</MudTd>
            <MudTd DataLabel="MaxOccupancy">@context.MaxOccupancy</MudTd>
            <MudTd DataLabel="OccupancyThresholdWarning">@context.OccupancyThresholdWarning</MudTd>
            <MudTd DataLabel="CurrentOccupancy">
            @if (context.CurrentOccupancy >= context.MaxOccupancy)
            {
                <MudChip T="string" Color="Color.Error">@context.CurrentOccupancy</MudChip>
            }
            else if(context.CurrentOccupancy >= context.OccupancyThresholdWarning)
            {
                <MudChip T="string" Color="Color.Warning">@context.CurrentOccupancy</MudChip>
            }
            else 
            {
                <MudChip T="string" Color="Color.Success">@context.CurrentOccupancy</MudChip>
            }
                </MudTd>
            <MudTd DataLabel="Number of Entrances"> @context.EntranceCount </MudTd>
            <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.LocationSqid, userInformationSqid))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                <MudFab Href="@($"/admin/{@organizationSqid}/{context.LocationSqid}/")" StartIcon="@Icons.Material.Filled.List" Size="Size.Small" />
                @if (@context.CurrentStatusDescription == "Suspended")
            {
                <MudFab @onclick="@(()=>Activate(@context.LocationSqid, userInformationSqid))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Undo" Size="Size.Small" />
                <MudFab @onclick="@(()=>Delete(@context.LocationSqid, userInformationSqid))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" />
            }
            @if (@context.CurrentStatusDescription == "Active")
            {
                <MudFab @onclick="@(()=>Suspend(@context.LocationSqid, userInformationSqid))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
            }
            @* @if (@context.CurrentStatusDescription == "Deleted")
            {
                <MudFab @onclick="@(()=>Undelete(@context.LocationSqid))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Undo" Size="Size.Small" />
            } *@
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudText Typo="Typo.caption">Last Updated: @DateTime.Now.ToLongTimeString()</MudText>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [CascadingParameter]
    public UserInformation? userInformation { get; set; }

    [Parameter] 
    public string? organizationSqid { get; set; }

    private bool dense = false;
    private bool hover = true;
    private string searchString = "";
    private Organization organization = new Organization();
    private Location location = new Location();
    private List<Location> locations ;
    private string orgSqid = "";
    private string orgName = "";
    internal string userInformationSqid = "";

    PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(10));

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask;
        userInformation =await occAuthorizationService.GetFromStateAsync(state);
        
        orgSqid = organizationSqid;
        organization = await organizationService.GetAsync(organizationSqid, userInformation.UserInformationSqid);
        orgName = organization.OrganizationName;
        RunTimer();
        // if (organization.LocationCount == 0) await Edit("");
        //GetLocations();
    }

    
    async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync()) { 
            GetLocations(); 
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        periodicTimer?.Dispose();
    }
    private async Task<List<Location>> GetLocations()
    {
        locations = await locationService.GetListAsync(organizationSqid, userInformationSqid);
        return  locations;
    }
    private bool FilterFunc(Location searchEntity)
    {
        if (string.IsNullOrEmpty(searchString)) return true;
        if (searchEntity.LocationName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (searchEntity.LocationDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }
    private async void Suspend( string locationSqid, string userInformationSqid)
    {
        try
        {
            await locationService.SuspendAsync(organizationSqid, locationSqid, userInformationSqid);
            Snackbar.Add("Entity Suspended", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add($"Error Suspending Entity {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error Suspending Entity", Severity.Error);
        }
    }
    private async void Delete(string locationSqid, string userInformationSqid)
    {
        try
        {
            await locationService.DeleteAsync(organizationSqid, locationSqid, userInformationSqid);
            Snackbar.Add("Entity Deleted", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add($"Error Deleting Entity {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error Deleting Entity", Severity.Error);
        }
    }
    private async void Activate(string locationSqid, string userInformationSqid)
    {
        try
        {
            await locationService.ActivateAsync(organizationSqid, locationSqid, userInformationSqid);
            Snackbar.Add("Entity Activated", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add($"Error Activating Entity {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error Activating Entity", Severity.Error);
        }
    }


    private async Task Edit(string sqid, string userInformationSqid)
    {
        DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, DisableBackdropClick =true };
        var parameters = new DialogParameters<LocationEditor>();
        parameters.Add(x => x.organizationSqid, organization.OrganizationSqid);
        parameters.Add(x => x.locationSqid, sqid);
        var dialog = await DialogService.ShowAsync<LocationEditor>("Edit Location", parameters, dialogOptions);
        var result = await dialog.Result;
        GetLocations();
       
    }

    // private void GoTo(string sqid) => NavManager.NavigateTo($"/admin/locations/{sqid}");


}
