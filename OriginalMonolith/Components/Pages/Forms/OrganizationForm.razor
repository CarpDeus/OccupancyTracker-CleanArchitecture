@inject OccupancyTracker.IService.IOrganizationService organizationService
@inject IOccAuthorizationService occAuthorizationService
@inject MudBlazor.ISnackbar Snackbar
@inject NavigationManager NavigatorService


<MudForm @ref="form" Model="organization" @bind-ReadOnly="@readOnly" Validation="@(validationRules.ValidateValue)" ValidationDelay="0">
    <MudTextField ShrinkLabel  Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationName" Label="Organization Name" Required="true" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <MudTextField  ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationDescription" Label="Organization Description" Variant="Variant.Filled" @bind-ReadOnly="@readOnly" Lines="numberDescriptionLines"></MudTextField>
    <hr />
    <MudTextField ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationAddress.AddressLine1" Label="Address Line 1" Required="true" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <MudTextField  ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationAddress.AddressLine2" Label="Address Line 2" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <MudTextField ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationAddress.City" Required="true" Label="City" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <MudTextField ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationAddress.State" Required="true" Label="State" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <MudTextField ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationAddress.PostalCode" Required="true" Label="Zip Code" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <MudTextField ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.OrganizationAddress.Country" Required="true" Label="Country" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <hr />
    <MudTextField ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.PhoneNumber.CountryCode" Required="true" Label="Country Code" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    <MudTextField ShrinkLabel Margin="Margin.Dense" T="string" @bind-Value="organization.PhoneNumber.Number" Required="true" Label="Phone Number" Variant="Variant.Filled" @bind-ReadOnly="@readOnly"></MudTextField>
    @if (userCanEdit && readOnly)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CanEdit">Edit</MudButton>
    }
    @if (!readOnly)
    {
        <MudButton  Variant="Variant.Filled" Color="Color.Success" OnClick="@Save">Save</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@Cancel">Cancel</MudButton>
    }
</MudForm>
<MudDivider />
@* <OccupancyTracker.Components.Pages.Components.ChangeStatus HandleStatusChange="@((args) =>   InvokedChangeState(((string[], int,int))args))" Ids="ids" ShowUndelete="userInformation.IsSuperAdmin" CurrentStatus="organization.CurrentStatus" /> *@

@code {

    [Parameter] public Organization organization { get; set; }
    [Parameter] public UserInformation userInformation { get; set; }
    [Parameter] public bool readOnly { get; set; }
    [Parameter] public bool userCanEdit { get; set; }

    private int numberDescriptionLines = 1;
    private OrganizationValidator validationRules = new OrganizationValidator();

    private string[] ids;

    private MudForm form;

    private void CanEdit()
    {
        readOnly = false;
        numberDescriptionLines = 5;
        this.StateHasChanged();
    }

    private async Task InvokedChangeState((string[], int, int) args)
    {
        Organization changedOrg = await organizationService.ChangeStatusAsync(args.Item1[0], args.Item2, args.Item3, userInformation);
        if ( changedOrg.CurrentStatus == args.Item3)
            NavigatorService.Refresh(true);
    }


    protected override async Task OnInitializedAsync()
    {
        if (organization.OrganizationId==0)
        {
            userCanEdit = true;
        }
        ids = new string[] { organization.OrganizationSqid, userInformation.UserInformationSqid };
        numberDescriptionLines = organization.OrganizationDescription.Length > 100 ? 5 : 1;


    }
    private async void Cancel()
    {
        if (organization.OrganizationId == 0)
        { organization = new Organization(); }
        else
        { organization = await organizationService.GetAsync(organization.OrganizationSqid, userInformation); }
        readOnly = true;
        this.StateHasChanged();
    }



    private async void Save()
    {

        await form.Validate();
        if (form.IsValid)
        {

            bool isNew = organization.OrganizationId == 0;

            if (isNew)
            {
                organization.CreatedBy = userInformation.UserInformationSqid;
                organization.CreatedDate = DateTime.Now;
            }
            else
            {
                organization.ModifiedBy = userInformation.UserInformationSqid;
                organization.ModifiedDate = DateTime.Now;
            }
            await organizationService.SaveAsync(organization, userInformation);

            string snackMessage = isNew ? "Organization Created" : "Organization Updated";
            Snackbar.Add(snackMessage, Severity.Success);

            readOnly = true;
            if (isNew)
            {
                NavigatorService.NavigateTo($"/orgs/{organization.OrganizationSqid}", true, true);
            }
            else
            {
                numberDescriptionLines = organization.OrganizationDescription.Length > 100 ? 5 : 1;
                this.StateHasChanged();
            }
        }
        StateHasChanged();

    }
}
