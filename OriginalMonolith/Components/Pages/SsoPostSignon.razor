@page "/sso-post-signon"
@layout Layout.EmptyLayout

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject TokenProvider tokenProvider
@inject IAuthorizationService AuthorizationService
@inject IOccAuthorizationService occAuthorizationService
@inject NavigationManager NavigatorService

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [CascadingParameter]
    public UserInformation? userInformation { get; set; }


    private string IdToken = "";
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask;
        if (userInformation == null)
            userInformation = await occAuthorizationService.GetFromStateAsync(state);
        IdToken = tokenProvider.IdToken;


        // Determine if we need to redirect the user
        ProtectedSessionStore.SetAsync("loggedInUserSqid", userInformation.UserInformationSqid);
        // var returnUri = NavigatorService.ToAbsoluteUri(NavigatorService.Uri).Query
        //     .Split('&')
        //     .FirstOrDefault(x => x.StartsWith("returnurl="))?
        //     .Split('=')[1];
        var returnUri = NavigatorService.ToAbsoluteUri(NavigatorService.Uri).Query;
        // Ensure Registration is complete
        if (!occAuthorizationService.HasCompletedRegistration(userInformation) || !userInformation.HasCompletedRegistration)
        {
            if (!NavigatorService.BaseUri.StartsWith("/profile"))
            {
                string profileEditUri = "/profile/edit";
                if (!string.IsNullOrEmpty(returnUri))
                    profileEditUri = $"{profileEditUri}?returnurl={returnUri}";
                NavigatorService.NavigateTo(profileEditUri);
            }
        }
        //No registration issue
        if (!string.IsNullOrEmpty(returnUri))
        {
            var returnUrl = returnUri.Split('&')
                                     .FirstOrDefault(x => x.StartsWith("returnurl="))?
                                     .Split('=')[1];
            if (!string.IsNullOrEmpty(returnUrl) && !NavigatorService.BaseUri.StartsWith(returnUrl))
            {
                NavigatorService.NavigateTo(returnUrl);
            }
        }
        NavigatorService.NavigateTo("/");
        await base.OnInitializedAsync();


    }
    // protected override Task OnAfterRenderAsync(bool firstRender)
    // {
    //      if (firstRender)
    //     {
    //         ProtectedSessionStore.SetAsync("loggedInUserSqid", userInformation.UserInformationSqid);
    //         var returnUrl = NavigatorService.NavigationManager.ToAbsoluteUri(NavigatorService.NavigationManager.Uri).Query
    //             .Split('&')
    //             .FirstOrDefault(x => x.StartsWith("returnurl="))?
    //             .Split('=')[1];


    //         if (!string.IsNullOrEmpty(returnUrl))
    //         {
    //             NavigatorService.NavigationManager.NavigateTo(returnUrl);
    //         }
    //         else if (!NavigatorService.NavigationManager.BaseUri.StartsWith("/profile"))
    //         {
    //             if (!occAuthorizationService.HasCompletedRegistration(userInformation) || !userInformation.HasCompletedRegistration)
    //             {
    //                 NavigatorService.NavigationManager.NavigateTo($"/profile/edit");
    //             }
    //         }
    //     }
    //     return base.OnAfterRenderAsync(firstRender);

    // }
}
